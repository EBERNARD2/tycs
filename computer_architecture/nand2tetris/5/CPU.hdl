// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	 
    // If MSB of instruction is 0 then we have an address if it's 1 we have a compute instruction for the ALU 
    // Mux 16 needs to be connected to ALU output as we may need to save value into A register


    //If instruction[5] is on (pointing to A register destination bit from ALU output) or the instruction is an address then load into A register


    //If instruction[12] is on (for c instructions) then we serve the ALU the inM value. If it is off we serve the value in register a


    // Serve ALU bits 6 to 11 from C instruction to determine which computation will take place. X comes from D register, Y comes from MUX 16


    // Use instruction[4] to determine if ALU output will be stored in D register (also link back up to Mux 16 gate)


    // If Instruction[3] is on and it is a c instruction write to output address


    // Emit output Address from A register

    // 




}